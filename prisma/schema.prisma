// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

//https://www.prisma.io/docs/concepts/components/prisma-schema/data-sources
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//https://www.prisma.io/docs/concepts/components/prisma-schema/generators
//"npx prisma migrate" ou "npm run migrate dev" actionne les 2 générateurs à chaque fois que la commande est lancée.
generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../prisma/generated/type-graphql"
}

//https://www.prisma.io/docs/concepts/components/prisma-schema/data-model
model User{
  id Int @id @default(autoincrement())
  firstname String? //optional to allow the user 
  lastname String?  //to connect just with the email and password
  email String @unique
  password String
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  //Relation fields
  comments Comment[]
  tickets_author Ticket[] @relation("author")
  tickets_assign Ticket[] @relation("assigned")
  tokens Token[]
}

model Token {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  type TokenType
  emailToken String?   @unique // Only used for short lived email tokens
  valid      Boolean   @default(true)
  expiration DateTime

  //Relations fields
  user User @relation(fields: [userId], references: [id])
  userId Int
}

enum TokenType {
  EMAIL// used as a short-lived token sent to the user's email
  API 
}

model Ticket{
  id Int @id @default(autoincrement()) //For a string ID   --- id String @id @default(cuid())
  title String 
  description String
  status String 
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  //Relations
  //https://www.prisma.io/docs/concepts/components/prisma-schema/relations#disambiguating-relations
  user_author User @relation(name:"author",fields: [user_author_id], references: [id])
  user_author_id Int
  user_assign User? @relation("assigned",fields: [user_assign_id], references: [id])
  user_assign_id Int?
  project Project @relation(fields: [project_id], references: [id])
  project_id Int
}

model Comment{
  id Int @id @default(autoincrement())
  content String
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  //Relations
  author User @relation(fields: [author_id], references: [id])
  author_id Int
}

model Project{
  id Int @id @default(autoincrement())
  subject String?
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  //Relations
  tickets Ticket[]
}

